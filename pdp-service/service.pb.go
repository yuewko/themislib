// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Attribute
	Request
	Response
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Response_Effect int32

const (
	Response_DENY            Response_Effect = 0
	Response_PERMIT          Response_Effect = 1
	Response_NOTAPPLICABLE   Response_Effect = 2
	Response_INDETERMINATE   Response_Effect = 3
	Response_INDETERMINATED  Response_Effect = 4
	Response_INDETERMINATEP  Response_Effect = 5
	Response_INDETERMINATEDP Response_Effect = 6
)

var Response_Effect_name = map[int32]string{
	0: "DENY",
	1: "PERMIT",
	2: "NOTAPPLICABLE",
	3: "INDETERMINATE",
	4: "INDETERMINATED",
	5: "INDETERMINATEP",
	6: "INDETERMINATEDP",
}
var Response_Effect_value = map[string]int32{
	"DENY":            0,
	"PERMIT":          1,
	"NOTAPPLICABLE":   2,
	"INDETERMINATE":   3,
	"INDETERMINATED":  4,
	"INDETERMINATEP":  5,
	"INDETERMINATEDP": 6,
}

func (x Response_Effect) String() string {
	return proto.EnumName(Response_Effect_name, int32(x))
}
func (Response_Effect) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Attribute struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Attribute) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Attribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Request struct {
	Attributes []*Attribute `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Response struct {
	Effect     Response_Effect `protobuf:"varint,1,opt,name=effect,enum=service.Response_Effect" json:"effect,omitempty"`
	Reason     string          `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Obligation []*Attribute    `protobuf:"bytes,3,rep,name=obligation" json:"obligation,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetEffect() Response_Effect {
	if m != nil {
		return m.Effect
	}
	return Response_DENY
}

func (m *Response) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Response) GetObligation() []*Attribute {
	if m != nil {
		return m.Obligation
	}
	return nil
}

func init() {
	proto.RegisterType((*Attribute)(nil), "service.Attribute")
	proto.RegisterType((*Request)(nil), "service.Request")
	proto.RegisterType((*Response)(nil), "service.Response")
	proto.RegisterEnum("service.Response_Effect", Response_Effect_name, Response_Effect_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PDP service

type PDPClient interface {
	Validate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type pDPClient struct {
	cc *grpc.ClientConn
}

func NewPDPClient(cc *grpc.ClientConn) PDPClient {
	return &pDPClient{cc}
}

func (c *pDPClient) Validate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/service.PDP/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PDP service

type PDPServer interface {
	Validate(context.Context, *Request) (*Response, error)
}

func RegisterPDPServer(s *grpc.Server, srv PDPServer) {
	s.RegisterService(&_PDP_serviceDesc, srv)
}

func _PDP_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDPServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.PDP/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDPServer).Validate(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _PDP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.PDP",
	HandlerType: (*PDPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _PDP_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4f, 0xf2, 0x40,
	0x10, 0xc5, 0x69, 0x0b, 0x05, 0xe6, 0x0b, 0x7c, 0xcb, 0x68, 0x4c, 0xe3, 0x89, 0xf4, 0xc4, 0x89,
	0x68, 0xbd, 0x78, 0xf1, 0x50, 0xed, 0x1e, 0x48, 0xb0, 0x6e, 0x9a, 0xc6, 0xc4, 0x63, 0x81, 0xc1,
	0x6c, 0x42, 0x58, 0xec, 0x2e, 0x24, 0x1e, 0xbd, 0xfb, 0x47, 0x1b, 0x96, 0x82, 0x10, 0xe2, 0x6d,
	0xdf, 0xdb, 0xdf, 0xce, 0xbc, 0xbc, 0x85, 0x8e, 0xa6, 0x72, 0x23, 0xa7, 0x34, 0x5c, 0x95, 0xca,
	0x28, 0x6c, 0x56, 0x32, 0xe4, 0xd0, 0x8e, 0x8d, 0x29, 0xe5, 0x64, 0x6d, 0x08, 0xbb, 0xe0, 0xca,
	0x59, 0xe0, 0xf4, 0x9d, 0x41, 0x3b, 0x73, 0xe5, 0x0c, 0x11, 0xea, 0xe6, 0x73, 0x45, 0x81, 0x6b,
	0x1d, 0x7b, 0xc6, 0x4b, 0x68, 0x6c, 0x8a, 0xc5, 0x9a, 0x02, 0xcf, 0x9a, 0x3b, 0x11, 0x3e, 0x40,
	0x33, 0xa3, 0x8f, 0x35, 0x69, 0x83, 0x11, 0x40, 0xb1, 0x9f, 0xa8, 0x03, 0xa7, 0xef, 0x0d, 0xfe,
	0x45, 0x38, 0xdc, 0xaf, 0x3f, 0x2c, 0xcb, 0x8e, 0xa8, 0xf0, 0xdb, 0x85, 0x56, 0x46, 0x7a, 0xa5,
	0x96, 0x9a, 0xf0, 0x06, 0x7c, 0x9a, 0xcf, 0x69, 0x6a, 0x6c, 0x92, 0x6e, 0x14, 0x1c, 0x1e, 0xef,
	0x91, 0x21, 0xb7, 0xf7, 0x59, 0xc5, 0xe1, 0x15, 0xf8, 0x25, 0x15, 0x5a, 0x2d, 0xab, 0xa4, 0x95,
	0xda, 0x46, 0x51, 0x93, 0x85, 0x7c, 0x2f, 0x8c, 0x54, 0xcb, 0xc0, 0xfb, 0x3b, 0xca, 0x2f, 0x15,
	0x7e, 0x39, 0xe0, 0xef, 0xc6, 0x63, 0x0b, 0xea, 0x09, 0x4f, 0xdf, 0x58, 0x0d, 0x01, 0x7c, 0xc1,
	0xb3, 0xe7, 0x51, 0xce, 0x1c, 0xec, 0x41, 0x27, 0x7d, 0xc9, 0x63, 0x21, 0xc6, 0xa3, 0xa7, 0xf8,
	0x71, 0xcc, 0x99, 0xbb, 0xb5, 0x46, 0x69, 0xc2, 0xf3, 0x2d, 0x92, 0xc6, 0x39, 0x67, 0x1e, 0x22,
	0x74, 0x4f, 0xac, 0x84, 0xd5, 0xcf, 0x3c, 0xc1, 0x1a, 0x78, 0x01, 0xff, 0x4f, 0x39, 0xc1, 0xfc,
	0xe8, 0x1e, 0x3c, 0x91, 0x08, 0xbc, 0x85, 0xd6, 0x6b, 0xb1, 0x90, 0xb3, 0xc2, 0x10, 0xb2, 0xa3,
	0x12, 0x6c, 0xcf, 0xd7, 0xbd, 0xb3, 0x5a, 0xc2, 0xda, 0xc4, 0xb7, 0xdf, 0x7b, 0xf7, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xee, 0x4b, 0x04, 0x50, 0xef, 0x01, 0x00, 0x00,
}
